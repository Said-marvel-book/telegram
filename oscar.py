import telebot
from telebot import types
import sqlite3 as sql
bot = telebot.TeleBot("1792611963:AAHpykGbmPG2S1SXpRbNRMqduBjwVU1-wiw")
red = telebot.TeleBot("1757379210:AAHPW73fQXFRKGgS94SCqsrYarVECv8vu0M")
keyboard1 = telebot.types.ReplyKeyboardMarkup()
keyboard1.row("–ù1", "–ù2", "–ù3", "–ù4", "–ù5", "–ù6", "–ù7", "–ù8", "–ù9", "–ù10")
names = {"—Å–∞–≥–¥–∏–∞–Ω–∞": "s",
         "—Å–∞—Ñ–∏—Ä–∞": "s",
         "—é–ª–¥—É–∑": "s",
         "–º–∞—Ä—å—è–º": "s",
         "–º—É—Å—Ç–∞—Ñ–æ": "s",
         "–∑–∞—Ñ–∞—Ä": "s",
         "–∏—Å–∫–∞–Ω–¥–µ—Ä": "s",
         "–∞—Ä—Ç—É—Ä": "s",
         "–∂–∞—ä—Ñ–∞—Ä": "s",
         "—Ö–æ–ª–∏–¥": "s",
         "–∞–±–¥—É–≥–∞–Ω–∏": "s",
         "–∞–±–¥—É—Ä–∞—à–∏–¥": "s",
         "–¥–∞–Ω–∏–µ–ª—å": "s",
         "—Å–∞–∏–¥—Ö–æ–Ω": "s",
         "–∞–º–∏—Ä—Ö–æ–Ω": "s",
         "—Ö–∞—ë—Ç": "s",
         "–∫–∞–∑–∏–º–∂–æ–Ω": "s",
         "—Å—Ç–∞—Å": "s",
         "—Å–∞–∏–¥–∞–∫–±–∞—Ä": "s",
         "—ç—Ä–Ω—Å—Ç": "s"}
name = ""


@bot.message_handler(commands=["start"])
def start_message(message):
    markup = types.ReplyKeyboardRemove(selective=False)
    bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ –±–æ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –µ–∂–µ–≥–æ–¥–Ω–æ–π –ø—Ä–µ–º–∏–∏ "–ï–¥–µ–ª—å". –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –∏–º—è.', reply_markup=markup)
    register(message)


@bot.message_handler(commands=["do_test"])
def do_test(message):
    con = sql.connect("noms.db")
    with con:
        cur = con.cursor()
        cur.execute("CREATE TABLE IF NOT EXISTS `noms` (`id` Integer, `nomination` STRING, `nominates` STRING)")
        cur.execute("SELECT nomination FROM `noms`")
        rows = cur.fetchall()
        keyboard = types.InlineKeyboardMarkup()
        z = 0
        for i in rows:
            i = i[0]
            nominate = types.InlineKeyboardButton(text=i, callback_data=f"N{z}")
            keyboard.row(nominate)
            z += 1
        bot.send_message(message.chat.id, "–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ –≤ –∫–∞–∂–¥–æ–π –Ω–æ–º–∏–Ω–∞—Ü–∏–∏", reply_markup=keyboard)
        cur.close()
        con.commit()


@bot.message_handler(content_types=["text"])
def send_text(message):
    if message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        start_message(message)
    elif message.text == "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µüó≥":
        do_test(message)
    elif message.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüîë":
        keyboard = telebot.types.ReplyKeyboardMarkup()
        keyboard.row("–í–∞—à–∏ –Ω–æ–º–∏–Ω–∞—Ü–∏–∏", "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")
        bot.send_message(message.chat.id, "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", reply_markup=keyboard)
    elif message.text == "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ":
        con = sql.connect("test.db")
        with con:
            cur = con.cursor()
            cur.execute("CREATE TABLE IF NOT EXISTS `test` (`name` STRING, `username` STRING, 'chat.id' Integer)")
            cur.execute(f"SELECT name FROM `test` WHERE chat.id = {message.chat.id}")
            a = cur.fetchall()
            cur.close()
            con.commit()


def register(message):
    bot.send_message(message.chat.id, "–í–∞—à–µ –∏–º—è (–±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏)")
    bot.register_next_step_handler(message, reg_name)


def reg_name(message):
    global name
    name = message.text.lower()
    if name in names:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —É—á–∏—Ç–µ–ª—è")
        bot.register_next_step_handler(message, check)
    elif name not in names:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–≤—Ç–æ—Ä–Ω–æ. –ï–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        register(message)


def check(message):
    d = names[name]
    if d == message.text:
        con = sql.connect("test.db")
        with con:
            cur = con.cursor()
            cur.execute("CREATE TABLE IF NOT EXISTS `test` (`name` STRING, `username` STRING, 'chat.id' Integer)")
            cur.execute(f"INSERT INTO `test` VALUES ('{name}', '{message.from_user.username}', '{message.chat.id}')")
            cur.close()
            con.commit()
        keyboard = telebot.types.ReplyKeyboardMarkup()
        keyboard.row("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µüó≥")
        keyboard.row("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüîë")
        bot.send_message(message.chat.id, "–£—Ä–∞ –ø–æ–ª—É—á–∏–ª–æ—Å—å!", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "–ü–æ—Ö–æ–∂–µ –≤—ã –æ—à–∏–±–ª–∏—Å—å. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ")

        register(message)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    print(call.data)
    if "NO" not in call.data:
        con = sql.connect("noms.db")
        with con:
            cur = con.cursor()
            cur.execute("CREATE TABLE IF NOT EXISTS `noms` (`id` Integer, `nomination` STRING, `nominates` STRING)")
            cur.execute("SELECT nomination FROM `noms`")
            rows = cur.fetchall()
            z = len(rows)
            cur.close()
            con.commit()
        for i in range(z):
            if call.data == f"N{i}":
                con = sql.connect("noms.db")
                with con:
                    cur = con.cursor()
                    cur.execute(f"SELECT nominates FROM `noms` WHERE id={i}")
                    rows = cur.fetchall()
                    keyboard = types.InlineKeyboardMarkup()
                    rows = rows[0][0].split(",")
                    x = 0
                    for y in rows:
                        nominate = types.InlineKeyboardButton(text=y, callback_data=f"N{i}NO{x}")
                        keyboard.row(nominate)
                        x += 1
                    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.id,
                                                  reply_markup=keyboard)
                    cur.close()
                    con.commit()
                break
    elif "NO" in call.data:
        con = sql.connect("noms.db")
        with con:
            cur = con.cursor()
            cur.execute("CREATE TABLE IF NOT EXISTS `noms` (`id` Integer, `nomination` STRING, `nominates` STRING)")
            cur.execute(f"SELECT nomination FROM `noms`")
            rows = cur.fetchall()
            cur.execute(f"SELECT nominates FROM `noms` WHERE id = {call.data[1]}")
            rows2 = cur.fetchall()
            rows2 = rows2[0][0].split(",")
            z = len(rows)
            x = len(rows2)
            cur.close()
            con.commit()
        for i in range(z):
            for y in range(x):
                print(f"N{i}NO{y}")
                if call.data == f"N{i}NO{y}":
                    r = open("–±–¥.txt", "r")
                    r = r.readlines()
                    print(f"–ù–æ–º–∏–Ω–∞—Ü–∏—è ‚Ññ{i} –ù–æ–º–∏–Ω–∞–Ω—Ç{y}")
                    r[i] = r[i].split(",")
                    r[i][y] = str(int(r[i][y]) + 1)
                    r[i] = ",".join(r[i])
                    r = "".join(r)
                    w = open("–±–¥.txt", "w")
                    w.write(r)
                    break


bot.polling(none_stop=True)
